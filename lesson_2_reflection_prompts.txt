What happens when you initialize a repository? Why do you need to do it?

Git initialises a new empty repository.  This creates the .git directory and
different files needed to track the commits and meta data involved in the project.

How is the staging area different from the working directory and the repository?
What value do you think it offers?

The working directory contains all of the project files whether or not they have
yet been added to the repository. The staging area is a kind of temporary
storage area in between the working directory and a commit to the repository. The
value of the staging area is it acts as a buffer between files in your directory
and a commit to your repository in that if you add files incorrectly to the
staging area you can remove them before you make a commit.

How can you use the staging area to make sure you have one commit per logical
change?

Before making a commit relating to a discrete logical change you can diff the
staging area with latest commit to ensure that only the changes relating to
the specific logical change you are targetting are in the staging area. If
there are any changes not related to the the logical change you're attempting
to commit you can remove them files from the staging area.

What are some situations when branches would be helpful in keeping your history
organized? How would branches help?

When adding new experimental features. It could help by allowing the freedom
to explore with a new feature while taking away any worry you might have of
breaking the main branch.

How do the diagrams help you visualize the branch structure?

The branch diagram helps to visualise at which point each branch came off
the master branch so that you are able to tell which changes from the master
branch are in either of the other branches.

What is the result of merging two branches together? Why do we represent it in
the diagram the way we do?

The changes between the different versions of files in the different branches
are automatically merged together. We represent it in the diagram because the
new head of the branch that you're currently on becomes the result of the
merging of the two branches - additionally that merging becomes a commit of its
own and that commit has two parents.  These parents are the tips of the branches
that are being merged together.

What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges
manually?
